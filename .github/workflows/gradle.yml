name: CI/CD Pipeline for Social Preview App

# Allow Actions to write packages (required when using GITHUB_TOKEN to push to GHCR)
permissions:
  contents: read
  packages: write

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: wealthy-grace/social-preview-app
  JAVA_VERSION: '17'
  GRADLE_VERSION: '8.5'

jobs:
  build-and-test:
    runs-on: ubuntu-latest

    services:
      mysql:
        image: mysql:8.0
        env:
          MYSQL_ROOT_PASSWORD: Server123@
          MYSQL_DATABASE: social-preview
          MYSQL_ROOT_HOST: '%'
        ports:
          - 3306:3306
        options: >-
          --health-cmd="mysqladmin ping -h localhost -u root -pServer123@"
          --health-interval=10s
          --health-timeout=5s
          --health-retries=5
          --health-start-period=30s

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: ${{ env.JAVA_VERSION }}
          distribution: 'temurin'

      - name: Setup Gradle
        uses: gradle/gradle-build-action@v2
        with:
          gradle-version: ${{ env.GRADLE_VERSION }}

      - name: Cache Gradle packages
        uses: actions/cache@v4
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: |
            ${{ runner.os }}-gradle-

      - name: Wait for MySQL to be ready
        run: |
          echo "Waiting for MySQL to be ready..."
          for i in {1..30}; do
            if mysqladmin ping -h 127.0.0.1 -P 3306 -u root -pServer123@ --silent; then
              echo "MySQL is ready!"
              break
            fi
            echo "Waiting for MySQL... ($i/30)"
            sleep 2
          done

      - name: Create test database
        run: |
          mysql -h 127.0.0.1 -P 3306 -u root -pServer123@ -e "CREATE DATABASE IF NOT EXISTS social_preview_test;"

      - name: Make gradlew executable
        run: chmod +x ./gradlew

      - name: Verify Spring Boot Test Dependencies
        run: |
          echo "Checking for spring-boot-starter-test dependency..."
          if ./gradlew dependencies --configuration testImplementation | grep -q "spring-boot-starter-test"; then
            echo "✅ spring-boot-starter-test found"
          else
            echo "❌ spring-boot-starter-test NOT found - this will cause test compilation to fail"
            echo "Please add this to your build.gradle:"
            echo "testImplementation 'org.springframework.boot:spring-boot-starter-test'"
          fi

      - name: Check Gradle dependencies
        run: ./gradlew dependencies --configuration testImplementation

      - name: Compile test classes
        run: ./gradlew compileTestJava --no-daemon
        env:
          SPRING_PROFILES_ACTIVE: test

      - name: Run tests with H2 database
        run: ./gradlew test --no-daemon --continue
        env:
          SPRING_PROFILES_ACTIVE: test

      - name: Build application (skip tests if they fail)
        run: ./gradlew clean build -x test --no-daemon

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: jar-artifacts
          path: build/libs/*.jar
          retention-days: 1

      - name: Upload test reports
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: test-reports
          path: build/reports/tests/
          retention-days: 7

  security-scan:
    runs-on: ubuntu-latest
    needs: build-and-test
    if: github.event_name == 'push'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: ${{ env.JAVA_VERSION }}
          distribution: 'temurin'

      - name: Cache Gradle packages
        uses: actions/cache@v4
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}

      - name: Run dependency vulnerability scan
        run: ./gradlew dependencyCheckAnalyze --no-daemon || true

      - name: Upload security scan results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: security-reports
          path: build/reports/
          retention-days: 7

  build-docker:
    runs-on: ubuntu-latest
    # allow building even if security-scan was skipped; it will still "need" build-and-test
    needs: [build-and-test, security-scan]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'

    outputs:
      image-digest: ${{ steps.build.outputs.digest }}
      image-tag: ${{ steps.meta.outputs.tags }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: jar-artifacts
          path: build/libs/

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Validate Docker image name
        run: |
          echo "Repository: ${{ github.repository }}"
          echo "Image name: ${{ env.IMAGE_NAME }}"
          echo "Registry: ${{ env.REGISTRY }}"
          echo "Full image path: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}"
          echo "✅ Using valid Docker image name format: ${{ env.IMAGE_NAME }}"

      - name: Log in to Container Registry (preferred: GITHUB_TOKEN)
        id: ghcr-login
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Fallback login with GHCR_PAT if GITHUB_TOKEN login failed
        if: steps.ghcr-login.outcome != 'success'
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GHCR_PAT }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=sha,prefix=commit-
            type=raw,value=latest,enabled={{is_default_branch}}
          labels: |
            org.opencontainers.image.title=Social Preview App
            org.opencontainers.image.description=Spring Boot Social Preview Application
            org.opencontainers.image.source=https://github.com/${{ github.repository }}
            org.opencontainers.image.url=https://github.com/${{ github.repository }}
            org.opencontainers.image.revision=${{ github.sha }}
            org.opencontainers.image.version=${{ github.ref_name }}
          flavor: |
            latest=auto

      - name: Build and push Docker image
        id: build
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          platforms: linux/amd64,linux/arm64
