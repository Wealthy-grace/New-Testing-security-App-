name: CI/CD Pipeline for Social Preview App

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

permissions:
  contents: read
  packages: write

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: wealthy-grace/social-preview-app
  JAVA_VERSION: 17
  GRADLE_VERSION: 8.5

jobs:
  # -----------------------------
  # 1. Build and Test
  # -----------------------------
  build-and-test:
    runs-on: ubuntu-latest

    services:
      mysql:
        image: mysql:8.0
        env:
          MYSQL_ROOT_PASSWORD: Server123@
          MYSQL_DATABASE: social-preview
          MYSQL_ROOT_HOST: '%'
        ports:
          - 3306:3306
        options: >-
          --health-cmd="mysqladmin ping -h localhost -u root -pServer123@"
          --health-interval=10s
          --health-timeout=5s
          --health-retries=5
          --health-start-period=30s

    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - uses: actions/setup-java@v4
        with:
          java-version: ${{ env.JAVA_VERSION }}
          distribution: temurin

      - uses: gradle/gradle-build-action@v2
        with:
          gradle-version: ${{ env.GRADLE_VERSION }}

      - uses: actions/cache@v4
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}

      - name: Wait for MySQL
        run: |
          for i in {1..30}; do
            if mysqladmin ping -h 127.0.0.1 -P 3306 -u root -pServer123@ --silent; then
              echo "‚úÖ MySQL is ready!"
              break
            fi
            echo "‚è≥ Waiting for MySQL... ($i/30)"
            sleep 2
          done

      - name: Create test database
        run: |
          mysql -h 127.0.0.1 -P 3306 -u root -pServer123@ \
            -e "CREATE DATABASE IF NOT EXISTS social_preview_test;"

      - run: chmod +x ./gradlew
        name: Make gradlew executable

      - name: Compile test classes
        run: ./gradlew compileTestJava --no-daemon
        env:
          SPRING_PROFILES_ACTIVE: test

      - name: Run tests
        run: ./gradlew test --no-daemon --continue
        env:
          SPRING_PROFILES_ACTIVE: test

      - name: Build application (skip tests)
        run: ./gradlew clean build -x test --no-daemon

      - uses: actions/upload-artifact@v4
        with:
          name: jar-artifacts
          path: build/libs/*.jar
          retention-days: 1

      - uses: actions/upload-artifact@v4
        if: always()
        with:
          name: test-reports
          path: build/reports/tests/
          retention-days: 7

  # -----------------------------
  # 2. Security Scan
  # -----------------------------
  security-scan:
    runs-on: ubuntu-latest
    needs: build-and-test
    if: github.event_name == 'push'

    steps:
      - uses: actions/checkout@v4

      - uses: actions/setup-java@v4
        with:
          java-version: ${{ env.JAVA_VERSION }}
          distribution: temurin

      - uses: actions/cache@v4
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}

      - name: Run dependency vulnerability scan
        run: ./gradlew dependencyCheckAnalyze --no-daemon || true

      - uses: actions/upload-artifact@v4
        if: always()
        with:
          name: security-reports
          path: build/reports/
          retention-days: 7

  # -----------------------------
  # 3. Docker Build & Push
  # -----------------------------
  build-docker:
    runs-on: ubuntu-latest
    needs: [ build-and-test, security-scan ]
    if: github.event_name == 'push'

    outputs:
      image-digest: ${{ steps.build.outputs.digest }}
      image-tag: ${{ steps.meta.outputs.tags }}

    steps:
      - uses: actions/checkout@v4

      - uses: actions/download-artifact@v4
        with:
          name: jar-artifacts
          path: build/libs/

      - uses: docker/setup-buildx-action@v3

      - name: Log in to GHCR
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=branch
            type=sha,prefix=commit-
            type=raw,value=latest,enable={{is_default_branch}}
          labels: |
            org.opencontainers.image.title=Social Preview App
            org.opencontainers.image.description=Spring Boot Social Preview Application
            org.opencontainers.image.source=https://github.com/${{ github.repository }}
            org.opencontainers.image.revision=${{ github.sha }}
            org.opencontainers.image.version=${{ github.ref_name }}

      - id: build
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          platforms: linux/amd64,linux/arm64

  # -----------------------------
  # 4. Deploy Staging
  # -----------------------------
  deploy-staging:
    runs-on: ubuntu-latest
    needs: build-docker
    if: github.ref == 'refs/heads/develop'

    steps:
      - name: Deploy to Staging
        run: |
          IMAGE_TAG=${{ steps.build-docker.outputs.image-tag }}
          echo "üöÄ Deploying staging image: $IMAGE_TAG"
          docker pull $IMAGE_TAG
          docker stop social-preview-app-staging || true
          docker rm social-preview-app-staging || true
          docker run -d --name social-preview-app-staging -p 8081:8080 \
            -e SPRING_PROFILES_ACTIVE=staging \
            $IMAGE_TAG

  # -----------------------------
  # 5. Deploy Production
  # -----------------------------
  deploy-production:
    runs-on: ubuntu-latest
    needs: build-docker
    if: github.ref == 'refs/heads/main'

    steps:
      - name: Deploy to Production
        run: |
          IMAGE_TAG=${{ steps.build-docker.outputs.image-tag }}
          echo "üöÄ Deploying production image: $IMAGE_TAG"
          docker pull $IMAGE_TAG
          docker stop social-preview-app || true
          docker rm social-preview-app || true
          docker run -d --name social-preview-app -p 80:8080 \
            -e SPRING_PROFILES_ACTIVE=production \
            $IMAGE_TAG

  # -----------------------------
  # 6. Cleanup
  # -----------------------------
  cleanup:
    runs-on: ubuntu-latest
    needs: [ build-and-test, security-scan, build-docker, deploy-staging, deploy-production ]
    if: always()

    steps:
      - name: Cleanup artifacts
        run: |
          echo "üßπ Cleaning up..."
          rm -rf build/ || true
